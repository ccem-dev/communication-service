- ordenação
    //order                                         CHECK
    //um ou mais campos                             CHECK
    //ascendente ou descendente                     CHECK
    //{sender:1, date:-1}                           CHECK (nao ocorre)
    //creationDate ou ordenação nativa do Elastic   CHECK - creationDate


- busca por status
- query por filtros                                 CHECK
- consertar URLs

- gerenciamento de exceções
- index mapping

DATABASE_USER=communication DATABASE_PASS=communication DATABASE_HOSTNAME=localhost DATABASE_PORT=27017 DATABASE=otus-communication API_PORT=8080 ELASTICSEARCH_PORT=9200 ELASTICSEARCH_HOSTNAME=http://localhost node app.js


- inserção e modificação levam documento para final do array
    - ordenamento natural é garantido?


{
  "currentQuantity": 0,
  "quantityToGet": 15,
  "order": {
    "fields": [
      "group",
      "sender",
      "creationDate"
    ],
    "mode": 1   // -1
  },
  "filter": {
    "status": "OPEN",
    "group": "oijasdoijasdo",
    "sender": "asodmaopd",
    "creationDate": "2020-06-04T03:00:00.000Z"
  }
}

===
    "sort" : [
        "sender",                                        body{query{match}} aceite um argumento <= Agrupa as respostas por grupos, sem definir ordem (daria para colocar o issueID para agrupar por issue)
        { "group" : {"order" : "asc"}},                   <= ordena os resultados por group, em ordem crescente (fica explícito no código que quero ordenar)
        { "creationDate" : "asc" }                        <= ordena por creationDate
    ]
    CHECK

-tipos de erro
- não acha index
- acha index mas a query vem vazia (tratado antecipadamente, com um issueExists)
    - não acha a issue de uma mensagem  CHECK

